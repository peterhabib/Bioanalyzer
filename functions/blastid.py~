def openblast():
    from Bio.Blast import NCBIWWW
    def blast22():
        chos = value.get()
        db = valdb.get()
        aligns = alignz.get()
        print(aligns)
        if aligns == 1:
            if chos == 'BLASTn':

                if db == 'Nucleotide collection(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "nt", "%s"%e1.get())
                elif db == 'NCBI Transcript Ref_Seq(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_rna", "%s"%e1.get())
                elif db == 'PDB nucleotide database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbnt", "%s"%e1.get())
                elif db == 'Non-redundant(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "nr", "%s"%e1.get())
                elif db == 'NCBI Protein Ref_Seq(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_protein", "%s"%e1.get())
                elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "swissprot", "%s"%e1.get())
                elif db == 'Expressed Sequences tags(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "est", "%s"%e1.get())
                elif db == 'Expressed Sequences tags(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "est", "%s"%e1.get())
                elif db == 'RefSeq Representative Genome Database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_representative_genomes", "%s"%e1.get())
                blast_record = NCBIXML.read(result_handle)
                root = Tk()
                S = Scrollbar(root)
                T = Text(root, height=4, width=500)
                S.pack(side=RIGHT, fill=Y)
                T.pack(side=LEFT, fill=Y)
                S.config(command=T.yview)
                T.config(yscrollcommand=S.set)
                file = open("lines.txt", "w")
                for alignment in blast_record.alignments:
                    for hsp in alignment.hsps:
                        if 1 == 1:
                            print("****Alignment****")
                            print("sequence:", alignment.title)
                            print("length:", alignment.length)
                            print("e value:", hsp.expect)
                            print(hsp.query[0:75] + "...")
                            print(hsp.sbjct[0:75] + "...")
                            view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                                alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                                hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                            T.insert(END, view)
                            file.write(view)
                filenames = filedialog.asksaveasfilename(initialdir="/media/peter/14A08922A0890C04",
                                                         title="Select file",
                                                         filetypes=(
                                                             ("Text File", "*.txt"), ("FASTA File", "*.fasta"),
                                                             ("alignment", "*.aln*")))
                filename = filenames
                if not os.path.exists(os.path.dirname(filename)):
                    try:
                        os.makedirs(os.path.dirname(filename))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                file = open(filename, "w")
                reads = open("lines.txt")
                for i, line in enumerate(reads):
                    result = "%s" % line
                    file.write(result)
                reads.close()
                file.close()

            elif chos == 'BLASTp':
                win.filename = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                          filetypes=(("FASTA files", "*.fasta"), ("all files", "*.*")))
                record = SeqIO.read(win.filename, format="fasta")
                if db == 'Nucleotide collection(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "nt", "%s"%e1.get())
                elif db == 'NCBI Transcript Ref_Seq(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_rna", "%s"%e1.get())
                elif db == 'PDB nucleotide database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbnt", "%s"%e1.get())
                elif db == 'Non-redundant(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "nr", "%s"%e1.get())
                elif db == 'NCBI Protein Ref_Seq(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_protein", "%s"%e1.get())
                elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "swissprot", "%s"%e1.get())
                elif db == 'PDB protein database(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbaa", "%s"%e1.get())
                blast_record = NCBIXML.read(result_handle)
                root = Tk()
                S = Scrollbar(root)
                T = Text(root, height=4, width=500)
                S.pack(side=RIGHT, fill=Y)
                T.pack(side=LEFT, fill=Y)
                S.config(command=T.yview)
                T.config(yscrollcommand=S.set)
                file = open("lines.txt", "w")
                for alignment in blast_record.alignments:
                    for hsp in alignment.hsps:
                        if 1 == 1:
                            print("****Alignment****")
                            print("sequence:", alignment.title)
                            print("length:", alignment.length)
                            print("e value:", hsp.expect)
                            print(hsp.query[0:75] + "...")
                            print(hsp.sbjct[0:75] + "...")
                            view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                                alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                                hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                            T.insert(END, view)
                            file.write(view)
                filenames = filedialog.asksaveasfilename(initialdir="/media/peter/14A08922A0890C04",
                                                         title="Select file",
                                                         filetypes=(
                                                             ("Text File", "*.txt"), ("FASTA File", "*.fasta"),
                                                             ("alignment", "*.aln*")))
                filename = filenames
                if not os.path.exists(os.path.dirname(filename)):
                    try:
                        os.makedirs(os.path.dirname(filename))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                file = open(filename, "w")
                reads = open("lines.txt")
                for i, line in enumerate(reads):
                    result = "%s" % line
                    file.write(result)
                reads.close()
                file.close()

            elif chos == 'tBLASTn':
                win.filename = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                          filetypes=(("FASTA files", "*.fasta"), ("all files", "*.*")))
                record = SeqIO.read(win.filename, format="fasta")
                if db == 'Nucleotide collection(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "nt", "%s"%e1.get())
                elif db == 'NCBI Transcript Ref_Seq(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_rna", "%s"%e1.get())
                elif db == 'PDB nucleotide database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbnt", "%s"%e1.get())
                elif db == 'Non-redundant(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "nr", "%s"%e1.get())
                elif db == 'NCBI Protein Ref_Seq(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_protein", "%s"%e1.get())
                elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "swissprot", "%s"%e1.get())
                elif db == 'PDB protein database(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbaa", "%s"%e1.get())
                blast_record = NCBIXML.read(result_handle)
                root = Tk()
                S = Scrollbar(root)
                T = Text(root, height=4, width=500)
                S.pack(side=RIGHT, fill=Y)
                T.pack(side=LEFT, fill=Y)
                S.config(command=T.yview)
                T.config(yscrollcommand=S.set)
                file = open("lines.txt", "w")
                for alignment in blast_record.alignments:
                    for hsp in alignment.hsps:
                        if 1 == 1:
                            print("****Alignment****")
                            print("sequence:", alignment.title)
                            print("length:", alignment.length)
                            print("e value:", hsp.expect)
                            print(hsp.query[0:75] + "...")
                            print(hsp.sbjct[0:75] + "...")
                            view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                                alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                                hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                            T.insert(END, view)
                            file.write(view)
                filenames = filedialog.asksaveasfilename(initialdir="/media/peter/14A08922A0890C04",
                                                         title="Select file",
                                                         filetypes=(
                                                             ("Text File", "*.txt"), ("FASTA File", "*.fasta"),
                                                             ("alignment", "*.aln*")))
                filename = filenames
                if not os.path.exists(os.path.dirname(filename)):
                    try:
                        os.makedirs(os.path.dirname(filename))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                file = open(filename, "w")
                reads = open("lines.txt")
                for i, line in enumerate(reads):
                    result = "%s" % line
                    file.write(result)
                reads.close()
                file.close()

            elif chos == 'BLASTx':
                win.filename = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                          filetypes=(("FASTA files", "*.fasta"), ("all files", "*.*")))
                record = SeqIO.read(win.filename, format="fasta")
                if db == 'Nucleotide collection(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "nt", "%s"%e1.get())
                elif db == 'NCBI Transcript Ref_Seq(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_rna", "%s"%e1.get())
                elif db == 'PDB nucleotide database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbnt", "%s"%e1.get())
                elif db == 'Non-redundant(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "nr", "%s"%e1.get())
                elif db == 'NCBI Protein Ref_Seq(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_protein", "%s"%e1.get())
                elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "swissprot", "%s"%e1.get())
                elif db == 'PDB protein database(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbaa", "%s"%e1.get())
                blast_record = NCBIXML.read(result_handle)
                root = Tk()
                S = Scrollbar(root)
                T = Text(root, height=4, width=500)
                S.pack(side=RIGHT, fill=Y)
                T.pack(side=LEFT, fill=Y)
                S.config(command=T.yview)
                T.config(yscrollcommand=S.set)
                file = open("lines.txt", "w")
                for alignment in blast_record.alignments:
                    for hsp in alignment.hsps:
                        if 1 == 1:
                            print("****Alignment****")
                            print("sequence:", alignment.title)
                            print("length:", alignment.length)
                            print("e value:", hsp.expect)
                            print(hsp.query[0:75] + "...")
                            print(hsp.sbjct[0:75] + "...")
                            view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                                alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                                hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                            T.insert(END, view)
                            file.write(view)
                filenames = filedialog.asksaveasfilename(initialdir="/media/peter/14A08922A0890C04",
                                                         title="Select file",
                                                         filetypes=(
                                                             ("Text File", "*.txt"), ("FASTA File", "*.fasta"),
                                                             ("alignment", "*.aln*")))
                filename = filenames
                if not os.path.exists(os.path.dirname(filename)):
                    try:
                        os.makedirs(os.path.dirname(filename))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                file = open(filename, "w")
                reads = open("lines.txt")
                for i, line in enumerate(reads):
                    result = "%s" % line
                    file.write(result)
                reads.close()
                file.close()

            elif chos == 'tBLASTx':
                win.filename = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                          filetypes=(("FASTA files", "*.fasta"), ("all files", "*.*")))
                record = SeqIO.read(win.filename, format="fasta")
                if db == 'Nucleotide collection(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "nt", "%s"%e1.get())
                elif db == 'NCBI Transcript Ref_Seq(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_rna", "%s"%e1.get())
                elif db == 'PDB nucleotide database(DNA)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbnt", "%s"%e1.get())
                elif db == 'Non-redundant(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "nr", "%s"%e1.get())
                elif db == 'NCBI Protein Ref_Seq(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "refseq_protein", "%s"%e1.get())
                elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "swissprot", "%s"%e1.get())
                elif db == 'PDB protein database(Protein)':
                    result_handle = NCBIWWW.qblast("blastn", "pdbaa", "%s"%e1.get())
                blast_record = NCBIXML.read(result_handle)
                root = Tk()
                S = Scrollbar(root)
                T = Text(root, height=4, width=500)
                S.pack(side=RIGHT, fill=Y)
                T.pack(side=LEFT, fill=Y)
                S.config(command=T.yview)
                T.config(yscrollcommand=S.set)
                file = open("lines.txt", "w")
                for alignment in blast_record.alignments:
                    for hsp in alignment.hsps:
                        if 1 == 1:
                            print("****Alignment****")
                            print("sequence:", alignment.title)
                            print("length:", alignment.length)
                            print("e value:", hsp.expect)
                            print(hsp.query[0:75] + "...")
                            print(hsp.sbjct[0:75] + "...")
                            view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                                alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                                hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                            T.insert(END, view)
                            file.write(view)
                filenames = filedialog.asksaveasfilename(initialdir="/media/peter/14A08922A0890C04",
                                                         title="Select file",
                                                         filetypes=(
                                                             ("Text File", "*.txt"), ("FASTA File", "*.fasta"),
                                                             ("alignment", "*.aln*")))
                filename = filenames
                if not os.path.exists(os.path.dirname(filename)):
                    try:
                        os.makedirs(os.path.dirname(filename))
                    except OSError as exc:  # Guard against race condition
                        if exc.errno != errno.EEXIST:
                            raise

                file = open(filename, "w")
                reads = open("lines.txt")
                for i, line in enumerate(reads):
                    result = "%s" % line
                    file.write(result)
                reads.close()
                file.close()


    mainloop()


