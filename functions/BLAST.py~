from Bio.Blast import NCBIXML
from Bio.Blast import NCBIWWW
import tkinter
from Bio import SeqIO
import tkinter as tk
from tkinter import *
def blast(infile,outfile,program,database,align):
    chos = program
    db = database
    aligns = align
    print(aligns)
    if aligns == 0:
        if chos == 'BLASTn':
            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                print("Error")
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                print("Error")
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                print("Error")
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "refseq_representative_genomes", ser)

            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)

            filename = outfile

            file = open(filename, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'BLASTp':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:len(hsp.query)] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)

            filename = outfile

            file = open(filename, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'tBLASTn':

            record = SeqIO.read(str(outfile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_representative_genomes", ser)
            with open("Blast Result.xml", "w") as out_handle:
                out_handle.write(result_handle.read())
            result_handle.close()
            blast_qresult = SearchIO.read('Blast Result.xml', 'blast-xml')
            print(blast_qresult)


            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:len(hsp.query)] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'BLASTx':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:len(hsp.query)] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)

            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'tBLASTx':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()


    else:
        if chos == 'BLASTn':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("blastn", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("blastn", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("blastn", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastn", "refseq_representative_genomes", ser)




            blast_record = NCBIXML.read(result_handle)
            root = tk.Tk()
            S = tk.Scrollbar(root)
            T = tk.Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:100] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:100] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()




        elif chos == 'BLASTp':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("blastp", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastp", "refseq_representative_genomes", ser)



            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                        T.insert(END, view)
                        file.write(view)

            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()



        elif chos == 'tBLASTn':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "nt",ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_rna",ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "pdbnt",ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("tblastn", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("tblastn", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                            hsp.match[0:150] + "...", hsp.sbjct[0:150] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'BLASTx':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("blastx", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("blastx", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()

        elif chos == 'tBLASTx':

            record = SeqIO.read(str(infile), "fasta")
            ser = record.seq
            print(ser)
            if db == 'Nucleotide collection(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "nt", ser)
            elif db == 'NCBI Transcript Ref_Seq(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_rna", ser)
            elif db == 'PDB nucleotide database(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "pdbnt", ser)
            elif db == 'Non-redundant(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "nr", ser)
            elif db == 'NCBI Protein Ref_Seq(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_protein", ser)
            elif db == 'Non-redundant UniProtKB/SwissProt(Protein)':
                result_handle = NCBIWWW.qblast("tblastx", "swissprot", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "est", ser)
            elif db == 'Expressed Sequences tags(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "est", ser)
            elif db == 'RefSeq Representative Genome Database(DNA)':
                result_handle = NCBIWWW.qblast("tblastx", "refseq_representative_genomes", ser)
            blast_record = NCBIXML.read(result_handle)
            root = Tk()
            S = Scrollbar(root)
            T = Text(root, height=4, width=500)
            S.pack(side=RIGHT, fill=Y)
            T.pack(side=LEFT, fill=Y)
            S.config(command=T.yview)
            T.config(yscrollcommand=S.set)
            file = open("lines.txt", "w")
            for alignment in blast_record.alignments:
                for hsp in alignment.hsps:
                    if 1 == 1:
                        print("****Alignment****")
                        print("sequence:", alignment.title)
                        print("length:", alignment.length)
                        print("e value:", hsp.expect)
                        print(hsp.query[0:75] + "...")
                        print(hsp.sbjct[0:75] + "...")
                        view = "sequence:%s\nlength:%s\ne value:%s\n%s\n%s\n%s\n\n" % (
                            alignment.title, alignment.length, hsp.expect, hsp.query[0:150] + "...",
                            hsp.match[0:100] + "...", hsp.sbjct[0:150] + "...")
                        T.insert(END, view)
                        file.write(view)


            file = open(outfile, "w")
            reads = open("lines.txt")
            for i, line in enumerate(reads):
                result = "%s" % line
                file.write(result)
            reads.close()
            file.close()



blast("/home/peter/Desktop/Moduls/test_data/unknown_sequence.txt" , "/home/peter/Desktop/Moduls/test_data/result.txt" ,"BLASTn" ,"Nucleotide collection(DNA)" , "1" )
